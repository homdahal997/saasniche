// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  tenantId      String
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  password      String?   // Added for authentication

  // Relations
  accounts      Account[]
  sessions      Session[]
  tenant        Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  contents      Content[]
  contentUsage  ContentUsage[]

  @@index([tenantId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Tenant {
  id              String            @id @default(cuid())
  name            String
  domain          String?           @unique
  industry        Industry
  subscriptionPlan SubscriptionPlan @default(FREE)
  stripeCustomerId String?          @unique
  subscriptionId  String?          @unique
  currentPeriodEnd DateTime?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  // Relations
  users           User[]
  contents        Content[]
  templates       Template[]
  contentUsage    ContentUsage[]

  @@index([industry])
}

model Template {
  id          String      @id @default(cuid())
  name        String
  description String?
  industry    Industry
  contentType ContentType
  prompt      String      @db.Text
  variables   Json        // JSON array of variable names that can be customized
  isPublic    Boolean     @default(false)
  tenantId    String?     // null for public templates
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  tenant      Tenant?     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  contents    Content[]

  @@index([industry, contentType])
  @@index([tenantId])
}

model Content {
  id              String      @id @default(cuid())
  title           String
  description     String?
  contentType     ContentType
  industry        Industry
  prompt          String      @db.Text
  generatedContent String     @db.Text
  variables       Json?       // JSON object of variable values used
  templateId      String?
  userId          String
  tenantId        String
  isFavorite      Boolean     @default(false)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant          Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  template        Template?   @relation(fields: [templateId], references: [id], onDelete: SetNull)

  @@index([userId, tenantId])
  @@index([industry, contentType])
}

model ContentUsage {
  id              String    @id @default(cuid())
  userId          String
  tenantId        String
  contentType     ContentType
  tokensUsed      Int
  createdAt       DateTime  @default(now())

  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant          Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId, createdAt])
  @@index([userId, createdAt])
}

enum UserRole {
  USER
  ADMIN
  OWNER
}

enum Industry {
  MARKETING
  LEGAL
  HEALTHCARE
  FINANCE
  TECHNOLOGY
  ECOMMERCE
  EDUCATION
  REAL_ESTATE
  CONSULTING
  HOSPITALITY
  MANUFACTURING
  NON_PROFIT
  OTHER
}

enum ContentType {
  MARKETING_COPY
  EMAIL_TEMPLATE
  BLOG_POST
  SOCIAL_MEDIA
  LEGAL_DOCUMENT
  CONTRACT_TEMPLATE
  PRIVACY_POLICY
  TERMS_OF_SERVICE
  TECHNICAL_DOCUMENTATION
  API_DOCUMENTATION
  USER_MANUAL
  PRESS_RELEASE
  PRODUCT_DESCRIPTION
  JOB_DESCRIPTION
  OTHER
}

enum SubscriptionPlan {
  FREE
  BASIC
  PRO
  ENTERPRISE
}
