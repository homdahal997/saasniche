generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model InviteToken {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  email     String
  token     String   @unique
  tenantId  String
  expires   DateTime @db.Timestamp(6)
  createdAt DateTime @default(now()) @db.Timestamp(6)
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([tenantId])
  @@index([email])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String         @unique
  emailVerified DateTime?
  image         String?
  tenantId      String
  role          UserRole       @default(USER)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  password      String?
  accounts      Account[]
  contents      Content[]
  contentUsage  ContentUsage[]
  sessions      Session[]
  tenant        Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Tenant {
  id               String           @id @default(cuid())
  name             String
  domain           String?          @unique
  industry         Industry
  subscriptionPlan SubscriptionPlan @default(FREE)
  stripeCustomerId String?          @unique
  subscriptionId   String?          @unique
  currentPeriodEnd DateTime?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  contents         Content[]
  contentUsage     ContentUsage[]
  inviteTokens     InviteToken[]
  templates        Template[]
  users            User[]

  @@index([industry])
}

model Template {
  id          String      @id @default(cuid())
  name        String
  description String?
  industry    Industry
  contentType ContentType
  prompt      String
  variables   Json
  isPublic    Boolean     @default(false)
  tenantId    String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  contents    Content[]
  tenant      Tenant?     @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([industry, contentType])
  @@index([tenantId])
}

model Content {
  id               String      @id @default(cuid())
  title            String
  description      String?
  contentType      ContentType
  industry         Industry
  prompt           String
  generatedContent String
  variables        Json?
  templateId       String?
  userId           String
  tenantId         String
  isFavorite       Boolean     @default(false)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  template         Template?   @relation(fields: [templateId], references: [id])
  tenant           Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user             User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, tenantId])
  @@index([industry, contentType])
}

model ContentUsage {
  id          String      @id @default(cuid())
  userId      String
  tenantId    String
  contentType ContentType
  tokensUsed  Int
  createdAt   DateTime    @default(now())
  tenant      Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([tenantId, createdAt])
  @@index([userId, createdAt])
}

enum UserRole {
  USER
  ADMIN
  OWNER
}

enum Industry {
  MARKETING
  LEGAL
  HEALTHCARE
  FINANCE
  TECHNOLOGY
  ECOMMERCE
  EDUCATION
  REAL_ESTATE
  CONSULTING
  HOSPITALITY
  MANUFACTURING
  NON_PROFIT
  OTHER
}

enum ContentType {
  MARKETING_COPY
  EMAIL_TEMPLATE
  BLOG_POST
  SOCIAL_MEDIA
  LEGAL_DOCUMENT
  CONTRACT_TEMPLATE
  PRIVACY_POLICY
  TERMS_OF_SERVICE
  TECHNICAL_DOCUMENTATION
  API_DOCUMENTATION
  USER_MANUAL
  PRESS_RELEASE
  PRODUCT_DESCRIPTION
  JOB_DESCRIPTION
  OTHER
}

enum SubscriptionPlan {
  FREE
  BASIC
  PRO
  ENTERPRISE
}
